---
import { Image } from "astro:assets";
import type { BooksEntry } from "@/types"; // Rename to BookEntry when you're ready
import ReadingLevelGuide from "@components/common/ReadingLevelGuide";
interface Props {
  entry: BooksEntry;
}
const { entry } = Astro.props;
const { title, image, imageAlt, author, readingLevel } = entry.data;
// Helper function to create tracking-friendly slug from title
function createTrackingId(title: string): string {
  return title
    .toLowerCase()
    .replace(/[^a-z0-9\s]/g, "") // Remove special chars
    .replace(/\s+/g, "-") // Replace spaces with hyphens
    .replace(/^-+|-+$/g, ""); // Remove leading/trailing hyphens
}
---

<div
  class="h-full m-2 bg-gradient-to-br gradient rounded-lg intersect:animate-fadeUp opacity-0"
>
  <div
    class="glass h-full rounded-lg overflow-y-auto overflow-x-hidden shadow-md group"
  >
    <div class="relative aspect-[2/3] overflow-y-auto overflow-x-hidden">
      <!-- Background Image -->
      {
        image && (
          <a
            href={`/books/${entry.id}`}
            class="block pointer-events-auto md:pointer-events-none"
          >
            <Image
              class="absolute object-cover w-full h-full transition-transform duration-300 group-hover:scale-[105%] group-[.expanded]:scale-[105%]"
              src={image}
              alt={imageAlt ?? title}
              width={500}
              height={750}
              loading="lazy"
            />
          </a>
        )
      }
      <!-- Top Info Overlay - starts small, expands on hover/tap -->
      <div
        class="absolute top-0 w-full bg-black/60 backdrop-blur-sm text-white transition-all duration-300 ease-out group-hover:bg-black/80 group-hover:h-full group-[.expanded]:bg-black/80 group-[.expanded]:h-full flex flex-col"
      >
        <!-- Default State: Just Title (always visible when not expanded) -->
        <div
          class="p-3 group-hover:hidden group-[.expanded]:hidden cursor-pointer md:cursor-default"
          onclick="toggleOverlay(this)"
        >
          <div class="flex items-center justify-between">
            <h3 class="text-lg font-semibold text-white truncate flex-1">
              {title}
            </h3>
            <!-- Expand arrow - only visible on mobile -->
            <svg
              class="w-5 h-5 text-white/70 ml-2 transition-transform duration-200 md:hidden"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              aria-hidden="true"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M19 9l-7 7-7-7"></path>
            </svg>
          </div>
          {author && <p class="text-sm italic opacity-80 mt-1">by {author}</p>}
          <!-- Subtle hint for mobile users -->
          <p class="text-xs text-white/60 mt-1 md:hidden">Tap for details</p>
        </div>
        <!-- Expanded State: Full Content (visible on hover or when expanded class added) -->
        <div
          class="hidden group-hover:flex group-[.expanded]:flex flex-col h-full p-4"
        >
          <!-- Close button for mobile -->
          <button
            class="md:hidden self-end text-white/60 hover:text-white text-lg mb-2"
            onclick="toggleOverlay(this)"
            aria-label="Close details"
          >
            ✕
          </button>

          <div class="space-y-3 flex-1">
            <h3 class="text-lg font-semibold text-white">
              {title}
            </h3>
            {author && <p class="text-sm italic opacity-80">by {author}</p>}
            {
              readingLevel?.guide && (
                <div>
                  <ReadingLevelGuide
                    emojiString={readingLevel.guide}
                    client:load
                  />
                  {readingLevel.description && (
                    <p class="text-xs text-yellow-100 leading-relaxed border-t border-white/20 pt-2 mt-2">
                      {readingLevel.description}
                    </p>
                  )}
                </div>
              )
            }
          </div>
          <!-- Read Now Button -->
          <div class="mt-4 pt-3 border-t border-white/20">
            <a
              href={`/books/${entry.id}`}
              class="block w-full bg-accent hover:bg-accent/80 text-white text-center py-3 px-4 rounded-lg font-semibold transition-colors duration-200"
              data-track-category="book-click"
              data-track-id={createTrackingId(title)}
              data-track-label={title}
              data-track-author={author}
              data-track-book-id={entry.id}
            >
              Read Now →
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  function toggleOverlay(element) {
    // Find the parent card container
    const card = element.closest(".group");
    if (card) {
      card.classList.toggle("expanded");
    }
  }
</script>
